function [Position, Logs, Header, Trial, State, Target, Outcome, Haptics] = load_wrist_task_trial_logs(SUBJ, YYYY, MM, DD)
%LOAD_WRIST_TASK_TRIAL_LOGS  Import data from trial .logs file.
%
% Syntax:
%   [Position, Logs, Trial, State, Target, Outcome, Haptics] = io.load_wrist_task_trial_logs(SUBJ, YYYY, MM, DD);
%
% Example:
%  [Position, Logs, Trial, State, Target, Outcome, Haptics] = ...
%       io.load_wrist_task_trial_logs("Rupert", 2021, 09, 10);
%
% v0.1 2021-09-11
% v1.0 2021-10-12
% v2.0 2021-10-17
% v2.1 2022-05-29 -- Moved to +io submodule

% Input handling
if nargin < 4
    DD = '*';
else
    if isnumeric(DD)
        DD = num2str(DD, '%02d');
    end
end

if nargin < 3
    MM = '*';
else
    if isnumeric(MM)
        MM = num2str(MM, '%02d');
    end
end

if nargin < 2
    if isstruct(SUBJ)
        f = SUBJ;
        SUBJ = f.Animal;
        YYYY = num2str(year(f.DateValue), '%04d');
        MM = num2str(month(f.DateValue), '%02d');
        DD = num2str(day(f.DateValue), '%02d');
    else
        YYYY = '*';
    end
else
    if isnumeric(YYYY)
        YYYY = num2str(YYYY, '%04d');
    end
end


txt_str = parameters('wrist_task_trial_logs_expr');
filename = sprintf(txt_str, SUBJ, SUBJ, YYYY, MM, DD);
F = dir(filename);
if isempty(F)
    error('Could not find any files matching string\n\t->\t <strong>%s</strong> <-\n', filename);
end
[~, idx] = sort(string(vertcat(F.date)), 'ascend');
F = F(idx);
Logs = [];
Position = [];
nFiles = numel(F);
tic;
fprintf(1, '\t->\tParsing text logs...(0/%d)\n', nFiles);
for iF = 1:nFiles
%     fid = fopen(fullfile(F(iF).folder, F(iF).name), 'r');
%     C = textscan(fid, ...
%         '%s %s %s %s %s', 'Delimiter', {' ', '\r', '\n'}, ...
%         'CollectOutput', true);
%     fclose(fid);
%     S = cellfun(@getTokenStruct, C{1});
    T = io.load_wrist_task_raw_logs(fullfile(F(iF).folder, F(iF).name));
    iPosition = T.var_category == "CURSOR";
    p = T(iPosition, {'raw'});
    
    % Find the part after equals signs that's inside of ().
    x_y_tx_ty = string(regexp(p.raw, '(?<=\=\().*(?=\))', 'match'));
    % This just takes the comma-delimited cell array of strings, joins
    % everything with commas, then splits knowing there will be an even
    % multiple of 4. This is because of how matlab functions take formatted
    % arrays for this particular application.
    x_y_tx_ty = reshape(str2double(string(strsplit(strjoin(...
        x_y_tx_ty, ","), ","))), 4, numel(x_y_tx_ty))';
    
    p.raw = [];
    p.x = x_y_tx_ty(:, 1);
    p.y = x_y_tx_ty(:, 2);
    p.tx = x_y_tx_ty(:, 3); % "Target" x -- from "easing"
    p.ty = x_y_tx_ty(:, 4); % "Target" y -- from "easing"
    
%     Logs = [Logs; struct2table(S)]; %#ok<AGROW>

    Position = [Position; p]; %#ok<AGROW>
    
    l = T(~iPosition, :);
    l(~startsWith(l.raw, "data."), :) = [];
    s = regexp(l.raw, '(?<var_group>\w+)\.(?<var_type>\w+)\.(?<var_name>[^=]+)\=(?<value>.+)', 'names');
    iRemove = cellfun(@isempty, s);
    l(iRemove, :) = [];
    s(iRemove) = [];
    st = struct2table(vertcat(s{:}));
    l.raw = [];
    l = [l, st]; %#ok<AGROW>
    Logs = [Logs; l]; %#ok<AGROW>
    fprintf(1,'\b\b\b\b\b%d/%d)\n', iF, nFiles);
end
% Logs = table2timetable(Logs, 'RowTimes', 'ts');
% iPosition = Logs.var_category=="CURSOR";
% Position = Logs(iPosition, {'value'});
% Logs(iPosition, :) = [];
% Position.x = cellfun(@(C)C(1), Position.value, 'UniformOutput', true);
% Position.y = cellfun(@(C)C(2), Position.value, 'UniformOutput', true);
% Position.value = [];

% Logs = sortrows(Logs, 'ts', 'ascend');
% Position = sortrows(Position, 'ts', 'ascend');
% [~, idx] = unique(Position.ts);
% Position = Position(idx, :);

fprintf(1, '\t->\tGetting trial metadata...');
[Trial, State, Header, Target, Outcome, Haptics, Logs] = io.parse_wrist_task_trials(Logs);

custom_property_variables = { ...
    'Import_Date', ...
    'Files', ...
    'Recording_Metadata', ...
    'Colors' ...
    };
Position = addprop(Position, ...
    custom_property_variables,...
    repmat({'table'}, 1, numel(custom_property_variables)));
Position.Properties.CustomProperties.Import_Date = datetime;
Position.Properties.CustomProperties.Files = F;
Position.Properties.CustomProperties.Recording_Metadata = ...
    struct('Subject', SUBJ, ...
           'Year', YYYY, ...
           'Month', MM, ...
           'Day', DD);
Position.Properties.CustomProperties.Colors = ...
    struct(...
        'Text', struct( ...
            'COMPLETE', validatecolor("#FFFFFF"), ...
            'INTERTRIAL', validatecolor("#BBBBBB"), ...
            'IN_T1', validatecolor("#00FFFF"), ...
            'T1_HOLD_1', validatecolor("#00FFFF"), ...
            'IN_T2', validatecolor("#11FF33"), ...
            'T2_HOLD_1', validatecolor("#11FF33"), ...
            'INSTRUCT_1', validatecolor("#CC22FF"), ...
            'T2_INSTRUCT_H1', validatecolor("#CC22FF"), ...
            'INSTRUCT_2', validatecolor("#11BB22"), ...
            'T2_INSTRUCT_V1', validatecolor("#11BB22"), ...
            'MOVE', validatecolor("#22DDFF"), ...
            'REACT', validatecolor("#CC22FF"), ...
            'T1_HOLD_2_CENTER', validatecolor("#CC22FF"), ...
            'T1_HOLD_2_OUTER', validatecolor("#CC22FF"), ...
            'MISTAKE', validatecolor("#FF2233"), ...
            'OVERSHOOT', validatecolor("#FF2233"), ...
            'PRE', validatecolor("#DDDDDD"), ...
            'T1_INSTRUCT_V1', validatecolor("#DDDDDD"), ...
            'SETUP', validatecolor("#DDDDDD"), ...
            'READY', validatecolor("#CC22FF"), ...
            'T1_INSTRUCT_V2', validatecolor("#CC22FF"), ...
            'REWARD', validatecolor("#22CC22"), ...
            'T2_INSTRUCT_H2', validatecolor("#11BB22"), ...
            'T2_INSTRUCT_V2', validatecolor("#11BB22"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#33BB33"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'Cursor', struct( ...
            'COMPLETE', validatecolor("#11DD11"), ...
            'INTERTRIAL', validatecolor("#CCCCCC"), ...
            'IN_T1', validatecolor("#333333"), ...
            'T1_HOLD_1', validatecolor("#333333"), ...
            'IN_T2', validatecolor("#333333"), ...
            'T2_HOLD_1', validatecolor("#333333"), ...
            'INSTRUCT_1', validatecolor("#CC22FF"), ...
            'T2_INSTRUCT_H1', validatecolor("#CC22FF"), ...
            'INSTRUCT_2', validatecolor("#CCCCCC"), ...
            'T2_INSTRUCT_V1', validatecolor("#CCCCCC"), ...
            'REACT', validatecolor("#CC22FF"), ...
            'T1_HOLD_2_CENTER', validatecolor("#CC22FF"), ...
            'T1_HOLD_2_OUTER', validatecolor("#CC22FF"), ...
            'MOVE', validatecolor("#22DDFF"), ...
            'MISTAKE', validatecolor("#DD1111"), ...
            'OVERSHOOT', validatecolor("#DD1111"), ...
            'PRE', validatecolor("#CCCCCC"), ...
            'T1_INSTRUCT_V1', validatecolor("#CCCCCC"), ...
            'SETUP', validatecolor("#CCCCCC"), ...
            'READY', validatecolor("#CCCCCC"), ...
            'T1_INSTRUCT_V2', validatecolor("#CCCCCC"), ...
            'REWARD', validatecolor("#11DD11"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#22CC22"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'T0_Edge', struct( ...
            'COMPLETE', validatecolor("#000000"), ...
            'INTERTRIAL', validatecolor("#000000"), ...
            'IN_T1', validatecolor("#000000"), ...
            'T1_HOLD_1', validatecolor("#000000"), ...
            'IN_T2', validatecolor("#000000"), ...
            'T2_HOLD_1', validatecolor("#000000"), ...
            'INSTRUCT_1', validatecolor("#000000"), ...
            'T2_INSTRUCT_H1', validatecolor("#000000"), ...
            'INSTRUCT_2', validatecolor("#AAAAAA"), ...
            'T2_INSTRUCT_V1', validatecolor("#AAAAAA"), ...
            'REACT', validatecolor("#AAAAAA"), ...
            'T1_HOLD_2_CENTER', validatecolor("#AAAAAA"), ...
            'T1_HOLD_2_OUTER', validatecolor("#AAAAAA"), ...
            'MOVE', validatecolor("#AAAAAA"), ...
            'MISTAKE', validatecolor("#AAAAAA"), ...
            'OVERSHOOT', validatecolor("#AAAAAA"), ...
            'PRE', validatecolor("#000000"), ...
            'T1_INSTRUCT_V1', validatecolor("#000000"), ...
            'SETUP', validatecolor("#000000"), ...
            'READY', validatecolor("#000000"), ...
            'T1_INSTRUCT_V2', validatecolor("#000000"), ...
            'REWARD', validatecolor("#000000"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#FFFFFF"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'T1_Fill', struct( ...
            'COMPLETE', validatecolor("#000000"), ...
            'INTERTRIAL', validatecolor("#000000"), ...
            'IN_T1', validatecolor("#FFFFFF"), ...
            'T1_HOLD_1', validatecolor("#FFFFFF"), ...
            'IN_T2', validatecolor("#000000"), ...
            'T2_HOLD_1', validatecolor("#000000"), ...
            'INSTRUCT_1', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_H1', validatecolor("#FFFFFF"), ...
            'INSTRUCT_2', validatecolor("#000000"), ...
            'T2_INSTRUCT_V1', validatecolor("#000000"), ...
            'REACT', validatecolor("#FFFFFF"), ...
            'T1_HOLD_2_CENTER', validatecolor("#FFFFFF"), ...
            'T1_HOLD_2_OUTER', validatecolor("#FFFFFF"), ...
            'MOVE', validatecolor("#000000"), ...
            'MISTAKE', validatecolor("#000000"), ...
            'OVERSHOOT', validatecolor("#000000"), ...
            'PRE', validatecolor("#000000"), ...
            'T1_INSTRUCT_V1', validatecolor("#000000"), ...
            'SETUP', validatecolor("#000000"), ...
            'READY', validatecolor("#FFFFFF"), ...
            'T1_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'REWARD', validatecolor("#000000"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#FFFFFF"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'T1_Edge', struct( ...
            'COMPLETE', validatecolor("#000000"), ...
            'INTERTRIAL', validatecolor("#000000"), ...
            'IN_T1', validatecolor("#FFFFFF"), ...
            'T1_HOLD_1', validatecolor("#FFFFFF"), ...
            'IN_T2', validatecolor("#000000"), ...
            'T2_HOLD_1', validatecolor("#000000"), ...
            'INSTRUCT_1', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_H1', validatecolor("#FFFFFF"), ...
            'INSTRUCT_2', validatecolor("#000000"), ...
            'T2_INSTRUCT_V1', validatecolor("#000000"), ...
            'REACT', validatecolor("#000000"), ...
            'T1_HOLD_2_CENTER', validatecolor("#000000"), ...
            'T1_HOLD_2_OUTER', validatecolor("#000000"), ...
            'MOVE', validatecolor("#000000"), ...
            'MISTAKE', validatecolor("#000000"), ...
            'OVERSHOOT', validatecolor("#000000"), ...
            'PRE', validatecolor("#FFFFFF"), ...
            'T1_INSTRUCT_V1', validatecolor("#FFFFFF"), ...
            'SETUP', validatecolor("#FFFFFF"), ...
            'READY', validatecolor("#FFFFFF"), ...
            'T1_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'REWARD', validatecolor("#000000"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#FFFFFF"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'T2_Fill', struct( ...
            'COMPLETE', validatecolor("#11FF33"), ...
            'INTERTRIAL', validatecolor("#000000"), ...
            'IN_T1', validatecolor("#000000"), ...
            'T1_HOLD_1', validatecolor("#000000"), ...
            'IN_T2', validatecolor("#FFFFFF"), ...
            'T2_HOLD_1', validatecolor("#FFFFFF"), ...
            'INSTRUCT_1', validatecolor("#000000"), ...
            'T2_INSTRUCT_H1', validatecolor("#000000"), ...
            'INSTRUCT_2', validatecolor("#000000"), ...
            'T2_INSTRUCT_V1', validatecolor("#000000"), ...
            'MOVE', validatecolor("#000000"), ...
            'REACT', validatecolor("#000000"), ...
            'T1_HOLD_2_CENTER', validatecolor("#000000"), ...
            'T1_HOLD_2_OUTER', validatecolor("#000000"), ...
            'MISTAKE', validatecolor("#000000"), ...
            'OVERSHOOT', validatecolor("#000000"), ...
            'PRE', validatecolor("#000000"), ...
            'T1_INSTRUCT_V1', validatecolor("#000000"), ...
            'SETUP', validatecolor("#000000"), ...
            'READY', validatecolor("#000000"), ...
            'T1_INSTRUCT_V2', validatecolor("#000000"), ...
            'REWARD', validatecolor("#22CC22"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#FFFFFF"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
        'T2_Edge', struct( ...
            'COMPLETE', validatecolor("#FFFFFF"), ...
            'INTERTRIAL', validatecolor("#000000"), ...
            'IN_T1', validatecolor("#000000"), ...
            'T1_HOLD_1', validatecolor("#000000"), ...
            'IN_T2', validatecolor("#000000"), ...
            'T2_HOLD_1', validatecolor("#000000"), ...
            'INSTRUCT_1', validatecolor("#CC22FF"), ...
            'T2_INSTRUCT_H1', validatecolor("#CC22FF"), ...
            'INSTRUCT_2', validatecolor("#11BB22"), ...
            'T2_INSTRUCT_V1', validatecolor("#11BB22"), ...
            'REACT', validatecolor("#FFFFFF"), ...
            'T1_HOLD_2_CENTER', validatecolor("#FFFFFF"), ...
            'T1_HOLD_2_OUTER', validatecolor("#FFFFFF"), ...
            'MOVE', validatecolor("#FFFFFF"), ...
            'MISTAKE', validatecolor("#FF2233"), ...
            'OVERSHOOT', validatecolor("#FF2233"), ...
            'PRE', validatecolor("#000000"), ...
            'T1_INSTRUCT_V1', validatecolor("#000000"), ...
            'SETUP', validatecolor("#000000"), ...
            'READY', validatecolor("#CC22FF"), ...
            'T1_INSTRUCT_V2', validatecolor("#CC22FF"), ...
            'REWARD', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_H2', validatecolor("#FFFFFF"), ...
            'T2_INSTRUCT_V2', validatecolor("#FFFFFF"), ...
            'TIMEOUT', validatecolor("#FFFFFF"), ...
            'DEBOUNCE_REWARD_DISPENSE', validatecolor("#FFFFFF"), ...
            'SYNC', validatecolor("#FFFFFF") ...
            ), ...
          'T2_LineStyle', struct( ...
            'COMPLETE', '-', ...
            'INTERTRIAL', '-', ...
            'IN_T1', '--', ...
            'T1_HOLD_1', '--', ...
            'IN_T2', '-', ...
            'T2_HOLD_1', '-', ...
            'INSTRUCT_1', ':', ...
            'T2_INSTRUCT_H1', ':', ...
            'INSTRUCT_2', '-', ...
            'T2_INSTRUCT_V1', '-', ...
            'REACT', '-', ...
            'T1_HOLD_2_CENTER', '-', ...
            'T1_HOLD_2_OUTER', '-', ...
            'MOVE', '-', ...
            'MISTAKE', '-', ...
            'OVERSHOOT', '-', ...
            'PRE', '--', ...
            'T1_INSTRUCT_V1', '--', ...
            'SETUP', '--', ...
            'READY', ':', ...
            'T1_INSTRUCT_V2', ':', ...
            'REWARD', '-', ...
            'T2_INSTRUCT_H2', ':', ...
            'T2_INSTRUCT_V2', ':', ...
            'TIMEOUT', ':', ...
            'DEBOUNCE_REWARD_DISPENSE', '--', ...
            'SYNC', '-' ...
            ) ...
        );
Position = synchronize(Position, State, 'first', 'previous');
Position = synchronize(Position, Target, 'first', 'previous');
Position = synchronize(Position, Trial, 'first', 'previous');
Position(isnan(Position.angle), :) = [];
[Params_Header, log_params, Position] = io.parse_wrist_task_position_parameters(Position);
Position = addprop(Position, {'Header', 'Parameters'}, {'table', 'table'});
Position.Properties.CustomProperties.Header = Params_Header;
Position.Properties.CustomProperties.Parameters = log_params;

Logs = addprop(Logs, {'Files'}, {'table'});
Logs.Properties.CustomProperties.Files = F;
fprintf(1, '<strong>complete!</strong>\n\n');
toc;

    function t = ts(a, b)
        %TS Return formatted text as datetime object.
        t = datetime(strjoin({a, b}, ' '), ...
            'InputFormat', 'yyyy-MM-dd HH:mm:ss,SSS', ...
            'Format', 'yyyy-MM-dd HH:mm:ss.SSS');
    end

    function s = getTokenStruct(txt)
        s = struct('ts', cell(1), ...
            'log_type', cell(1), ...
            'var_category', cell(1), ...
            'var_group', cell(1), ...
            'var_type', cell(1), ...
            'var_name', cell(1), ...
            'value', cell(1));
        tokens = strsplit(txt, ' '); 
        s(1).ts = ts(tokens{1}, tokens{2});
        data_token = strjoin(tokens(5:end), '_');
        data_struct = strsplit(data_token,'=');
        s(1).log_type = string(tokens{3});
        s(1).var_category = string(regexp(tokens{4}, '(?<=\[).*(?=\])', 'match'));
        
        if s(1).var_category == "CURSOR"
            s(1).var_group = 'cursor';
            s(1).var_type = 'data';
            s(1).var_name = 'position';
            try
                data = strsplit(string(regexp(data_struct{2}, '(?<=\().*(?=\))', 'match')), ',');
                s(1).value = [str2double(data{1}), str2double(data{2})];
            catch
                s(1).value = [0, 0]; 
            end
        else
            tmp = strsplit(data_struct{1}, '.');
            s(1).var_group = string(tmp{1});
            s(1).var_type = string(tmp{2});
            s(1).var_name = string(strjoin(tmp(3:end), '.'));
            try
                val = strsplit(data_struct{2}, ' ');
            catch
                fprintf(1,'Could not split token: <strong>%s</strong>\n', data_token);
                val = {'?'};
            end
            s(1).value = val{1};
        end
    end

end